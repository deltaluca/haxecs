package nape.callbacks;
import nape.constraint.WeldJoint;
import nape.constraint.UserConstraint;
import nape.constraint.PivotJoint;
import nape.constraint.LineJoint;
import nape.constraint.AngleJoint;
import nape.constraint.ConstraintList;
import nape.constraint.DistanceJoint;
import nape.constraint.LinearJoint;
import nape.constraint.MotorJoint;
import nape.constraint.ConstraintIterator;
import nape.constraint.Constraint;
import nape.callbacks.ConstraintCallback;
import nape.callbacks.ListenerIterator;
import nape.callbacks.PreCallback;
import nape.callbacks.ListenerList;
import nape.callbacks.BodyListener;
import nape.callbacks.PreFlag;
import nape.callbacks.InteractionType;
import nape.callbacks.CbEvent;
import nape.callbacks.InteractionCallback;
import nape.callbacks.Listener;
import nape.callbacks.CbTypeIterator;
import nape.callbacks.InteractionListener;
import nape.callbacks.BodyCallback;
import nape.callbacks.PreListener;
import nape.callbacks.OptionType;
import nape.callbacks.CbTypeList;
import nape.callbacks.ListenerType;
import nape.callbacks.CbType;
import nape.geom.Vec2List;
import nape.geom.RayResultList;
import nape.geom.RayResult;
import nape.callbacks.Callback;
import nape.geom.GeomPolyIterator;
import nape.geom.Mat23;
import nape.geom.RayResultIterator;
import nape.geom.Vec2Iterator;
import nape.geom.AABB;
import nape.geom.GeomPoly;
import nape.geom.Geom;
import nape.geom.GeomPolyList;
import nape.geom.MarchingSquares;
import nape.geom.Ray;
import nape.geom.MatMN;
import nape.geom.GeomVertexIterator;
import nape.geom.Winding;
import nape.geom.Vec3;
import nape.space.Broadphase;
import nape.space.Space;
import nape.phys.GravMassMode;
import nape.phys.Interactor;
import nape.phys.InertiaMode;
import nape.phys.InteractorList;
import nape.phys.CompoundList;
import nape.phys.BodyType;
import nape.phys.FluidProperties;
import nape.phys.Material;
import nape.phys.CompoundIterator;
import nape.phys.MassMode;
import nape.phys.BodyList;
import nape.phys.BodyIterator;
import nape.geom.Vec2;
import nape.phys.InteractorIterator;
import nape.phys.Compound;
import nape.util.Debug;
import nape.phys.Body;
import nape.util.BitmapDebug;
import nape.shape.EdgeIterator;
import nape.shape.Edge;
import nape.shape.EdgeList;
import nape.shape.Polygon;
import nape.util.ShapeDebug;
import nape.shape.ShapeList;
import nape.shape.Circle;
import nape.shape.ShapeType;
import nape.shape.ShapeIterator;
import nape.dynamics.FluidArbiter;
import nape.dynamics.InteractionGroupIterator;
import nape.shape.Shape;
import nape.dynamics.Arbiter;
import nape.dynamics.ArbiterIterator;
import nape.dynamics.InteractionFilter;
import nape.dynamics.ArbiterList;
import nape.dynamics.ArbiterType;
import nape.dynamics.ContactList;
import nape.dynamics.ContactIterator;
import nape.dynamics.Contact;
import nape.dynamics.CollisionArbiter;
import nape.dynamics.InteractionGroup;
import zpp_nape.ID;
import nape.dynamics.InteractionGroupList;
import zpp_nape.Config;
import zpp_nape.Const;
import zpp_nape.constraint.WeldJoint;
import zpp_nape.constraint.LineJoint;
import zpp_nape.constraint.UserConstraint;
import zpp_nape.constraint.PivotJoint;
import zpp_nape.constraint.MotorJoint;
import zpp_nape.constraint.AngleJoint;
import zpp_nape.constraint.LinearJoint;
import zpp_nape.constraint.DistanceJoint;
import zpp_nape.constraint.Constraint;
import zpp_nape.callbacks.CbSetPair;
import zpp_nape.callbacks.CbSet;
import zpp_nape.callbacks.Listener;
import zpp_nape.callbacks.Callback;
import zpp_nape.geom.Monotone;
import zpp_nape.geom.Mat23;
import zpp_nape.callbacks.CbType;
import zpp_nape.geom.AABB;
import zpp_nape.geom.MatMath;
import zpp_nape.geom.Simple;
import zpp_nape.geom.PartitionedPoly;
import zpp_nape.geom.GeomPoly;
import zpp_nape.geom.VecMath;
import zpp_nape.geom.Ray;
import zpp_nape.geom.Geom;
import zpp_nape.geom.Triangular;
import zpp_nape.geom.Cutter;
import zpp_nape.geom.VecN;
import zpp_nape.geom.PolyIter;
import zpp_nape.geom.Simplify;
import zpp_nape.geom.Convex;
import zpp_nape.geom.MarchingSquares;
import zpp_nape.geom.Vec2;
import zpp_nape.geom.Vec3;
import zpp_nape.geom.Distance;
import zpp_nape.geom.Collide;
import zpp_nape.space.DynAABBPhase;
import zpp_nape.space.Broadphase;
import zpp_nape.space.SweepPhase;
import zpp_nape.phys.Interactor;
import zpp_nape.phys.FeatureMix;
import zpp_nape.phys.FluidProperties;
import zpp_nape.phys.Material;
import zpp_nape.phys.Body;
import zpp_nape.phys.Compound;
import zpp_nape.util.Pool;
import zpp_nape.util.FastHash;
import zpp_nape.util.Math;
import zpp_nape.util.Names;
import zpp_nape.space.Space;
import zpp_nape.util.HaxeMacros;
import zpp_nape.util.WrapLists;
import zpp_nape.util.Debug;
import zpp_nape.util.Circular;
import zpp_nape.util.DisjointSetForest;
import zpp_nape.util.Queue;
import zpp_nape.util.Array2;
import zpp_nape.util.Lists;
import zpp_nape.util.Flags;
import zpp_nape.shape.Edge;
import zpp_nape.util.RBTree;
import zpp_nape.shape.Shape;
import zpp_nape.shape.Polygon;
import zpp_nape.shape.Circle;
import zpp_nape.dynamics.SpaceArbiterList;
import zpp_nape.dynamics.InteractionFilter;
import zpp_nape.dynamics.Contact;
import zpp_nape.dynamics.InteractionGroup;
import zpp_nape.dynamics.Arbiter;
#if swc@:keep#end
 class ConstraintListener extends Listener{
    public var zpp_inner_zn:ZPP_ConstraintListener;
    public var options(flibget_options,flibset_options):OptionType;
    inline function flibget_options():OptionType{
        return zpp_inner_zn.options.outer;
    }
    inline function flibset_options(options:OptionType):OptionType{
        zpp_inner_zn.options.set(options.zpp_inner);
        return this.options;
    }
    public var handler(flibget_handler,flibset_handler):ConstraintCallback->Void;
    inline function flibget_handler():ConstraintCallback->Void{
        return zpp_inner_zn.handler;
    }
    inline function flibset_handler(handler:ConstraintCallback->Void):ConstraintCallback->Void{
        {
            #if(!NAPE_RELEASE_BUILD)if(handler==null)throw "Error: ConstraintListener::handler cannot be null";
            #end
 zpp_inner_zn.handler=handler;
        };
        return this.handler;
    }
    #if flib@:keep function flibopts_1(){}
    #end
 public function new(event:CbEvent,options:Dynamic,handler:ConstraintCallback->Void,?precedence=0){
        ZPP_Listener.internal=true;
        super();
        ZPP_Listener.internal=false;
        #if(!NAPE_RELEASE_BUILD)if(handler==null)throw "Error: ConstraintListener::handler cannot be null";
        #end
 var xevent=-1;
        if(event==CbEvent.WAKE)xevent=ZPP_Flags.id_CbEvent_WAKE;
        else if(event==CbEvent.SLEEP)xevent=ZPP_Flags.id_CbEvent_SLEEP;
        else if(event==CbEvent.BREAK)xevent=ZPP_Flags.id_CbEvent_BREAK;
        #if(!NAPE_RELEASE_BUILD)else throw "Error: cbEvent '"+event.toString()+"' is not a valid event type for a ConstraintListener";
        #end
 zpp_inner_zn=new ZPP_ConstraintListener(ZPP_OptionType.argument(options),xevent,handler);
        zpp_inner=zpp_inner_zn;
        zpp_inner.outer=this;
        zpp_inner_zn.outer_zn=this;
        zpp_inner.precedence=precedence;
    }
}
